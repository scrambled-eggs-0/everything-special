"use strict";(self.webpackChunkomniserver=self.webpackChunkomniserver||[]).push([[281],{281:(t,e,n)=>{n.r(e),n(763).A.fixPolygon=t=>new s(t).hull;class s{constructor(t=[[0,1],[1,1]]){this.points=t,this.hull=this.getHull()}getHull(){const t=this.preparePivotPoint();let e=Array.from(this.points,((t,e)=>e));const n=Array.from(this.points,(e=>this.getAngle(t,e))),s=Array.from(this.points,(e=>this.euclideanDistanceSquared(t,e)));e.sort(((t,e)=>{const r=n[t],i=n[e];return r===i?s[t]-s[e]:r-i}));for(let t=1;t<e.length-1;t++)n[e[t]]===n[e[t+1]]&&(e[t]=-1);const r=[];for(let t=0;t<e.length;t++){const n=e[t],s=this.points[n];if(-1!==n)if(r.length<3)r.push(s);else{for(;this.checkOrientation(r[r.length-2],r[r.length-1],s)>0;)r.pop();r.push(s)}}return r.length<3?[]:r}checkOrientation(t,e,n){return(e[1]-t[1])*(n[0]-e[0])-(n[1]-e[1])*(e[0]-t[0])}getAngle(t,e){return Math.atan2(e[1]-t[1],e[0]-t[0])}euclideanDistanceSquared(t,e){const n=e[0]-t[0],s=e[1]-t[1];return n*n+s*s}preparePivotPoint(){let t=this.points[0];for(let e=1;e<this.points.length;e++){const n=this.points[e];(n[1]<t[1]||n[1]===t[1]&&n[0]<t[0])&&(t=n)}return t}}}}]);