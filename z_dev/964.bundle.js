"use strict";(self.webpackChunkomniserver=self.webpackChunkomniserver||[]).push([[964],{964:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// ONLY thing the api does is copy over the canvas to a webgl canvas\r\n// with shader effects. This means to draw anything we must draw it\r\n// on the canvas first and then do 1 draw call per each transformation.\r\n// This is the best even though drawing on webgl directly would be faster,\r\n// all our obstacles are tied to the canvas anyways and canvas can do pretty\r\n// much everything besides nonlinear transformations.\r\n\r\n// For the notable exception of doing something with some parameters not encoded\r\n// in the 2d image (e.g. z-coordinate) we should eventually implement a system\r\n// to add a buffer (see texCoordinates in serum's threedrenderer example)\r\n\r\nconst placeholder = document.getElementById('webglplaceholder');\r\nlet glCanvas;\r\n\r\nfunction initNonlinearTransform(vs, fs, uniformNames, uniformLambdas){\r\n    if(window.distortionsActive === true) unInitNonlinearTransform();\r\n    window.distortionsActive = true;\r\n\r\n    // set up canvas and resizing\r\n    glCanvas = document.createElement('canvas');\r\n    const gl = glCanvas.getContext('webgl2');\r\n    placeholder.appendChild(glCanvas);\r\n    \r\n    window.resizeWebGl = () => {\r\n        glCanvas.width = window.innerWidth;\r\n        glCanvas.height = window.innerHeight;\r\n        gl.viewport(0, 0, glCanvas.width, glCanvas.height);\r\n    }\r\n    window.resizeWebGl();\r\n    window.resizeFns.push(window.resizeWebGl);\r\n    \r\n    let vertexData = [];\r\n    let indicies = [];\r\n    \r\n    const jmp = 1;//10\r\n    const resX = Math.ceil(glCanvas.width / jmp);\r\n    const resY = Math.ceil(glCanvas.height / jmp);\r\n    \r\n    // forming verticies\r\n    for(let y = 0; y < resY; y++){\r\n        for(let x = 0; x < resX; x++){\r\n            // vertex positions in space. Scaled from -1 to 1\r\n            vertexData.push(\r\n                (x / (resX-1)) * 2 - 1,\r\n                (y / (resY-1)) * 2 - 1,\r\n            );\r\n        }\r\n    }\r\n    \r\n    // forming triangles\r\n    // we form triangles from y layer n to y layer n+1\r\n    for(let y = 0; y < resY-1; y++){\r\n        for(let x = 0; x < resX-1; x++){\r\n            const i = y * (resX) + x;\r\n            indicies.push(\r\n                i,\r\n                i+1,\r\n                i+resX,\r\n            );\r\n            indicies.push(\r\n                i+1,\r\n                i+resX,\r\n                i+resX+1,\r\n            );\r\n        }\r\n    }\r\n    \r\n    vertexData = new Float32Array(vertexData);\r\n    indicies = new Uint32Array(indicies);\r\n    \r\n    // Create vertex buffer\r\n    const vertexBuffer = gl.createBuffer();\r\n    {\r\n        // Bind buffer\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\r\n    \r\n        // Feed vertex buffer with data\r\n        gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);\r\n    }\r\n    \r\n    // Create index buffer\r\n    const indexBuffer = gl.createBuffer();\r\n    {\r\n        // Bind buffer\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    \r\n        // Feed index buffer with data\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indicies, gl.STATIC_DRAW);\r\n    }\r\n    \r\n    // Use shader program\r\n    function createShaderProgram() {\r\n        function compileShader(str, type) {\r\n            // create shader\r\n            const shader = gl.createShader(type)\r\n        \r\n            // give it source code and compile\r\n            gl.shaderSource(shader, str);\r\n            gl.compileShader(shader)\r\n        \r\n            const errors = gl.getShaderInfoLog(shader)\r\n            if (errors.length != 0) {\r\n                console.log('Error Compiling Shader!');\r\n                console.log(errors);\r\n                return null;\r\n            }\r\n            else return shader;\r\n        }\r\n\r\n        // Create shader program\r\n        const program = gl.createProgram();\r\n    \r\n        // Attach vertex shader\r\n        const vertexShader = compileShader(vs, gl.VERTEX_SHADER)\r\n        gl.attachShader(program, vertexShader)\r\n    \r\n        // Attach fragment shader\r\n        const fragmentShader = compileShader(fs, gl.FRAGMENT_SHADER)\r\n        gl.attachShader(program, fragmentShader)\r\n    \r\n        // Link and validate program\r\n        gl.linkProgram(program);\r\n        gl.validateProgram(program);\r\n    \r\n        // Check for errors\r\n        const errors = gl.getProgramInfoLog(program)\r\n        if (errors.length !== 0) {\r\n            console.log('Error Compiling Program!');\r\n            console.log(errors);\r\n        }\r\n    \r\n        // Free GPU memory\r\n        gl.deleteShader(vertexShader);\r\n        gl.deleteShader(fragmentShader);\r\n    \r\n        return program;\r\n    }\r\n    const program = createShaderProgram();\r\n    \r\n    gl.useProgram(program);\r\n    \r\n    {// Specify locations of pos in the typed arrays\r\n        let posLocation = gl.getAttribLocation(program, \"pos\");\r\n        gl.enableVertexAttribArray(posLocation);\r\n        gl.vertexAttribPointer(posLocation, 2, gl.FLOAT, false, 2 * Float32Array.BYTES_PER_ELEMENT, 0);// for second to last 0\r\n    }\r\n    \r\n    // Texture\r\n    const texture = gl.createTexture();\r\n    updateTexture();\r\n    \r\n    function updateTexture(){\r\n        // use texture unit 0\r\n        gl.activeTexture(gl.TEXTURE0 + 0);\r\n    \r\n        // bind to the TEXTURE_2D bind point of texture unit 0\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\r\n    \r\n        // canvas is not a power of 2. If it was, it would be higher quality to do\r\n        // gl.generateMipmap(gl.TEXTURE_2D);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);// gl.LINEAR\r\n    }\r\n\r\n    const uniforms = [];\r\n    for(let i = 0; i < uniformNames.length; i++){\r\n        uniforms.push(gl.getUniformLocation(program, uniformNames[i]));\r\n    }\r\n    \r\n    //TODO: flipY gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n    window.renderGl = () => {\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n        // get new canvas data\r\n        updateTexture();\r\n    \r\n        // setup uniforms\r\n        for(let i = 0; i < uniformLambdas.length; i++){\r\n            gl.uniform1f(uniforms[i], uniformLambdas[i]());\r\n        }\r\n        // let t = Date.now() / 1000;\r\n        // t -= Math.floor(t/100)*100;\r\n        // gl.uniform1f(uTime, t);\r\n        \r\n        gl.clearColor(0, 0, 0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n    \r\n        gl.drawElements(gl.TRIANGLES,\r\n            indicies.length, // how many vertecies we want to draw\r\n            gl.UNSIGNED_INT, // Uint32 for created indicies array \r\n            0 // offset in index array (0 = start from beginning)\r\n        )\r\n    }\r\n}\r\n\r\nfunction unInitNonlinearTransform(){\r\n    if(window.distortionsActive === false) return;\r\n    window.resizeFns = window.resizeFns.filter(f => f !== window.resizeWebGl);\r\n    window.distortionsActive = false;\r\n    glCanvas.remove();\r\n}\r\n\r\n// window.initDistortion(`#version 300 es\r\n//     in highp vec4 pos;\r\n    \r\n//     uniform float uTime;\r\n    \r\n//     out highp vec2 vTextureCoord;\r\n    \r\n//     void main()\r\n//     {\r\n//         gl_Position = pos;\r\n//         gl_Position.x += 0.1*sin(6.0*uTime + 3.0*pos.y);\r\n//         gl_Position.y += 0.2*sin(6.0*uTime - 6.0*pos.x);\r\n    \r\n//         // texture coordinate is just pos but within 0-1 instead of -1 to 1.\r\n//         // So scale in that range.\r\n//         vTextureCoord = (pos.xy+1.)*0.5;\r\n//     }`,\r\n//     `#version 300 es\r\n//     in highp vec2 vTextureCoord;\r\n    \r\n//     out highp vec4 outColor;\r\n    \r\n//     uniform sampler2D uSampler;\r\n    \r\n//     void main()\r\n//     {\r\n//         // outColor = vec4(vTextureCoord.x, 0.0, 0.0, 1.0);\r\n//         outColor = texture(uSampler, vTextureCoord);//vec4(1, 0, 0.5, 1);\r\n// }`, ['uTime'], [() => {return window.frames * 1000 / 60}]);\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({initNonlinearTransform, unInitNonlinearTransform});\r\n\r\n// // CONE MAP\r\n// window.initDistortion(`#version 300 es\r\n//     in highp vec4 pos;\r\n    \r\n//     uniform float uTime;\r\n    \r\n//     out highp vec2 vTextureCoord;\r\n    \r\n//     void main()\r\n//     {\r\n//         float angle = atan(pos.y, pos.x);\r\n//         float dist = sqrt(pos.y*pos.y + pos.x*pos.x);\r\n\r\n//         // calculating max distance along the angle from the origin to end of screen\r\n\r\n//         float p = max(abs(cos(angle)), abs(sin(angle)));\r\n//         // float maxDistAlongAngle = 0.5/p;\r\n\r\n//         // above 2 lines equivalent to:\r\n//         float x = cos(angle) / p;\r\n//         float y = sin(angle) / p;\r\n//         float maxDistAlongAngle = sqrt(x*x + y*y);\r\n\r\n//         // just setting x,y to gl_Position.xy results in oval shape. What we're doing is extruding to 3d.\r\n//         x = cos(angle) * dist / maxDistAlongAngle;\r\n//         y = sin(angle) * dist / maxDistAlongAngle;\r\n//         float z = dist / maxDistAlongAngle;\r\n\r\n//         float a = 2.;\r\n//         float b = 3.14/4.;\r\n\r\n//         float sa = sin(a);\r\n//         float sb = sin(b);\r\n//         float ca = cos(a);\r\n//         float cb = cos(b);\r\n\r\n//         float coneX = x * ca - y * sa;\r\n//         float coneY = (x * sa + y * ca) * sb - z * cb;\r\n\r\n//         float t = uTime - floor(uTime);\r\n\r\n//         gl_Position = pos;\r\n//         gl_Position.x = coneX * t + pos.x * (1.-t);\r\n//         gl_Position.y = coneY * t + pos.y * (1.-t) + .5;\r\n    \r\n//         // texture coordinate is just pos but within 0-1 instead of -1 to 1.\r\n//         // So scale in that range.\r\n//         vTextureCoord = (pos.xy+1.)*0.5;\r\n//     }`,\r\n//     `#version 300 es\r\n//     in highp vec2 vTextureCoord;\r\n    \r\n//     out highp vec4 outColor;\r\n    \r\n//     uniform sampler2D uSampler;\r\n    \r\n//     void main()\r\n//     {\r\n//         // outColor = vec4(vTextureCoord.x, 0.0, 0.0, 1.0);\r\n//         outColor = texture(uSampler, vTextureCoord);//vec4(1, 0, 0.5, 1);\r\n// }`);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///964\n")}}]);