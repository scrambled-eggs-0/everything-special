"use strict";(self.webpackChunkomniserver=self.webpackChunkomniserver||[]).push([[78],{78:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction importMap(str){\r\n    obstacles.length = 0;\r\n\r\n    const o = JSON.parse(str);\r\n\r\n    let {arena, safes, spawns, playerSpawn, tileColor, bgColor, texts} = o;\r\n\r\n    // arena.width, arena.height\r\n\r\n    mapDimensions.x=arena.width * 2;\r\n    mapDimensions.y=arena.height * 2;\r\n\r\n    spawnPosition.x=playerSpawn.x*2;\r\n    spawnPosition.y=playerSpawn.y*2;\r\n    window.respawnPlayer();\r\n    colors.background=tileColor; colors.tile=bgColor;\r\n\r\n    let counter = 0;\r\n\r\n    let obs = o.obstacles;\r\n    let enemies = o.enemy;\r\n\r\n    safes = safes.map(p => {\r\n        p.type = "safe";\r\n        return p;\r\n    });\r\n\r\n    texts = texts.map(p => {\r\n        p.type = "text";\r\n        return p;\r\n    });\r\n\r\n    // -----------------------------------------------------------------------------------------------------------------\r\n\r\n    const typeMap = {\r\n        \'normal\': {\r\n            type: [1,[],[0]],\r\n        },\r\n        // \'trans\': {\r\n        //     type: [1,[],[20]],\r\n        //     customMap: (params) => {\r\n        //         return {hex: \'#000000\', alpha: params.opaq};\r\n        //     }\r\n        // },\r\n        // \'block\': {\r\n        //     type: [1,[],[20]],\r\n        //     customMap: (params) => {\r\n        //         return {hex: params.color, alpha: 1};\r\n        //     }\r\n        // },\r\n        \'grav\': {\r\n            type: [1,[],[13]],\r\n            customMap: (params) => {\r\n                const p = {};\r\n                if(params.direction === \'right\'){\r\n                    p.conveyorAngle = 0\r\n                } else if(params.direction === \'down\'){\r\n                    p.conveyorAngle = 90;\r\n                } else if(params.direction === \'left\'){\r\n                    p.conveyorAngle = 180;\r\n                } else {\r\n                    p.conveyorAngle = 270;\r\n                }\r\n                p.conveyorFriction = 0.8;\r\n                p.conveyorAngleRotateSpeed = 0;\r\n                p.conveyorForce = params.force / 10000 * 7.08 * 5 / 16.66;\r\n                return p;\r\n            }\r\n        },\r\n        \'circle-normal\': {\r\n            type: [0,[],[0]],\r\n            radius: \'r\' // this means map radius to r\r\n            // all other params filled in 1:1, so x will be filled in from x, y from y, etc.\r\n        },\r\n        \'circle-lava\': {\r\n            type: [0,[],[1]],\r\n            radius: \'r\',\r\n            customMap: (params) => {\r\n                return {\r\n                    boundPlayer: true,\r\n                }\r\n            }\r\n        },\r\n        \'circle-tp\': {\r\n            type: [0,[],[12]],\r\n            customMap: (params) => {\r\n                return {\r\n                    tpx: params.tpx * 2,\r\n                    tpy: params.tpy * 2\r\n                }\r\n            }\r\n        },\r\n        \'lava\': {\r\n            type: [1,[],[1]],\r\n            customMap: (params) => {\r\n                return {\r\n                    boundPlayer: params.canCollide\r\n                };\r\n            }\r\n        },\r\n        \'poly\': {\r\n            type: [2,[],[0]],\r\n            customMap: (params) => {\r\n                const p = {points: []};\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.points.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2\r\n                    ])\r\n                }\r\n                return p;\r\n            }\r\n        },\r\n        \'poly-tp\': {\r\n            type: [2,[],[12]],\r\n            customMap: (params) => {\r\n                const p = {points: []};\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.points.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2\r\n                    ])\r\n                }\r\n                p.tpx = params.tpx * 2;\r\n                p.tpy = params.tpy * 2;\r\n                return p;\r\n            }\r\n        },\r\n        \'poly-safe\': {\r\n            type: [2,[],[11]],\r\n            customMap: (params) => {\r\n                const p = {points: []};\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.points.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2\r\n                    ])\r\n                }\r\n                return p;\r\n            }\r\n        },\r\n        \'poly-vinette\': {\r\n            type: [2,[],[24]],\r\n            customMap: (params) => {\r\n                const p = {points: [],\r\n                    innerR: params.vc.r,\r\n                    innerG: params.vc.g,\r\n                    innerB: params.vc.b,\r\n                    innerSize: params.ir,\r\n                    outerR: params.vc.r,\r\n                    outerG: params.vc.g,\r\n                    outerB: params.vc.b,\r\n                    outerSize: params.or,\r\n                    innerOpacity: 0,\r\n                    outerOpacity: params.o\r\n                };\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.points.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2\r\n                    ])\r\n                }\r\n                return p;\r\n            }\r\n        },\r\n        \'poly-lava\': {\r\n            type: [2,[],[1]],\r\n            customMap: (params) => {\r\n                const p = {points: []};\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.points.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2\r\n                    ])\r\n                }\r\n                p.boundPlayer = true;//params.canCollide;\r\n                return p;\r\n            }\r\n        },\r\n        \'move\': {\r\n            type: [1,[0],[0]],\r\n            customMap: (params) => {\r\n                const p = {path: []};\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.path.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2,\r\n                        params.speed * 2 / 1000\r\n                    ])\r\n                }\r\n    \r\n                p.currentPoint = params.currentPoint;\r\n    \r\n                const currentPoint = p.path[p.currentPoint];\r\n                let nextPointIndex = p.currentPoint+1;\r\n                if(nextPointIndex === p.path.length) nextPointIndex = 0;\r\n                const nextPoint = p.path[nextPointIndex];\r\n    \r\n                const totalDist = Math.sqrt((nextPoint[0]-currentPoint[0])**2+(nextPoint[1]-currentPoint[1])**2);\r\n                const fractionCovered = Math.sqrt((params.x*2-currentPoint[0])**2+(params.y*2-currentPoint[1])**2);\r\n                \r\n                p.currentPoint += fractionCovered / totalDist;\r\n    \r\n                p.x = p.path[0][0];\r\n                p.y = p.path[0][1];\r\n                return p;\r\n            }\r\n        },\r\n        \'lavamove\': {\r\n            type: [1,[0],[1]],\r\n            customMap: (params) => {\r\n                const p = {path: []};\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.path.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2,\r\n                        params.speed * 2 / 1000\r\n                    ])\r\n                }\r\n    \r\n                p.currentPoint = params.currentPoint;\r\n    \r\n                const currentPoint = p.path[p.currentPoint];\r\n                let nextPointIndex = p.currentPoint+1;\r\n                if(nextPointIndex === p.path.length) nextPointIndex = 0;\r\n                const nextPoint = p.path[nextPointIndex];\r\n    \r\n                const totalDist = Math.sqrt((nextPoint[0]-currentPoint[0])**2+(nextPoint[1]-currentPoint[1])**2);\r\n                const fractionCovered = Math.sqrt((params.x*2-currentPoint[0])**2+(params.y*2-currentPoint[1])**2);\r\n                \r\n                p.currentPoint += fractionCovered / totalDist;\r\n    \r\n                p.x = p.path[0][0];\r\n                p.y = p.path[0][1];\r\n    \r\n                p.boundPlayer = false;\r\n                if(params.collidable) p.boundPlayer = true;\r\n                return p;\r\n            }\r\n        },\r\n        \'tornado\': {\r\n            type: [1,[],[23]],\r\n            spinRadius: \'tornadoStrength\' \r\n        },\r\n        \'vinette\': {\r\n            type: [1,[],[24]],\r\n            customMap: (params) => {\r\n                return {\r\n                    innerR: params.vc.r,\r\n                    innerG: params.vc.g,\r\n                    innerB: params.vc.b,\r\n                    innerSize: params.ir,\r\n                    outerR: params.vc.r,\r\n                    outerG: params.vc.g,\r\n                    outerB: params.vc.b,\r\n                    outerSize: params.or,\r\n                    innerOpacity: 0,\r\n                    outerOpacity: params.o\r\n                }\r\n            }\r\n        },\r\n        \'tpmove\': {\r\n            type: [1,[0],[12]],\r\n            customMap: (params) => {\r\n                const p = {path: []};\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.path.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2,\r\n                        params.speed * 2 / 1000\r\n                    ])\r\n                }\r\n                \r\n                p.currentPoint = params.currentPoint;\r\n                p.x = p.path[0][0];\r\n                p.y = p.path[0][1];\r\n                p.tpx = params.tpx * 2; p.tpy = params.tpy * 2;\r\n                return p;\r\n            }\r\n        },\r\n        \'movingsafe\': {\r\n            type: [1,[0],[11]],\r\n            customMap: (params) => {\r\n                const p = {path: []};\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.path.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2,\r\n                        params.speed * 2 / 1000\r\n                    ])\r\n                }\r\n                p.currentPoint = params.currentPoint;\r\n                p.x = p.path[0][0];\r\n                p.y = p.path[0][1];\r\n                return p;\r\n            }\r\n        },\r\n        \'movingvinette\': {\r\n            type: [1,[0],[24]],\r\n            customMap: (params) => {\r\n                const p = {path: [],\r\n                    innerR: params.vc.r,\r\n                    innerG: params.vc.g,\r\n                    innerB: params.vc.b,\r\n                    innerSize: params.ir,\r\n                    outerR: params.vc.r,\r\n                    outerG: params.vc.g,\r\n                    outerB: params.vc.b,\r\n                    outerSize: params.or,\r\n                    innerOpacity: 0,\r\n                    outerOpacity: params.o\r\n                };\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.path.push([\r\n                        params.points[i][0]*2,\r\n                        params.points[i][1]*2,\r\n                        params.speed * 2 / 1000\r\n                    ])\r\n                }\r\n                p.currentPoint = params.currentPoint;\r\n                p.x = p.path[0][0];\r\n                p.y = p.path[0][1];\r\n                return p;\r\n            }\r\n        },\r\n        \'timetrap\': {\r\n            type: [1,[],[17]],\r\n            customMap: (params) => {\r\n                //C(1,[],[17],{h:200,w:300,y:700,x:300,timeTrapToShowTenth:true,timeTrapToKill:true,timeTrapRecoverySpeed:1.5,timeTrapMaxTime:300,});\r\n                const p = {timeTrapToShowTenth:false,timeTrapToKill:true,timeTrapRecoverySpeed:params.cdmult};\r\n    \r\n                p.timeTrapMaxTime = params.maxTime * 1000;\r\n                return p;\r\n            }\r\n        },\r\n        \'oval\': {\r\n            type: [0,[],[0]],\r\n            customMap: (params) => {\r\n                return {r: Math.min(params.radius, params.radius2)*2};\r\n            }\r\n        },\r\n        \'lava-oval\': {\r\n            type: [0,[],[1]],\r\n            customMap: (params) => {\r\n                return {r: Math.min(params.radius, params.radius2)*2, boundPlayer: true};\r\n            }\r\n        },\r\n        \'safe\': {\r\n            type: [1,[],[11]],\r\n        },\r\n        \'circle-safe\': {\r\n            type: [0,[],[11]],\r\n            r: \'r\'\r\n        },\r\n        \'circle-vinette\': {\r\n            type: [0,[],[24]],\r\n            customMap: (params) => {\r\n                return {\r\n                    innerR: params.vc.r,\r\n                    innerG: params.vc.g,\r\n                    innerB: params.vc.b,\r\n                    innerSize: params.ir,\r\n                    outerR: params.vc.r,\r\n                    outerG: params.vc.g,\r\n                    outerB: params.vc.b,\r\n                    outerSize: params.or,\r\n                    innerOpacity: 0,\r\n                    outerOpacity: params.o,\r\n                    r: params.r ?? params.radius\r\n                }\r\n            }\r\n        },\r\n        \'circle-coin\': {\r\n            radius: \'r\',\r\n            type: [0,[],[7]],\r\n            customMap: (params) => {\r\n                return {\r\n                    color: \'#d5d612\',\r\n                    coinAmount: 1\r\n                }\r\n            }\r\n        },\r\n        \'bounce\': {\r\n            type: [1,[],[2]],\r\n            customMap: (params) => {\r\n                return {bounciness: params.effect/3/10, decay: 0.5};\r\n            }\r\n        },\r\n        \'rotate-normal\': {\r\n            type: [1,[1],[0]],\r\n            customMap: (params) => {\r\n                params.x = params.distToPivot + params.pivotX;\r\n                params.y = params.pivotY;\r\n                return {\r\n                    x: params.x * 2 - params.w,\r\n                    y: params.y * 2 - params.h,\r\n                    initialRotation: params.angle * 180 / Math.PI,\r\n                    rotateSpeed: params.rotateSpeed / 360 / 220 * 1.36,\r\n                    pivotX: params.pivotX * 2,\r\n                    pivotY: params.pivotY * 2\r\n                };\r\n            }\r\n        },\r\n        \'rotate-lava\': {\r\n            type: [1,[1],[1]],\r\n            customMap: (params) => {\r\n                params.x = params.distToPivot + params.pivotX;\r\n                params.y = params.pivotY;\r\n                return {\r\n                    x: params.x * 2 - params.w,\r\n                    y: params.y * 2 - params.h,\r\n                    initialRotation: params.angle,\r\n                    rotateSpeed: params.rotateSpeed / 360 / 220 * 1.36,\r\n                    pivotX: params.pivotX * 2,\r\n                    pivotY: params.pivotY * 2,\r\n                    boundPlayer: params.canCollide\r\n                };\r\n            }\r\n        },\r\n        \'rotatingsafe\': {\r\n            type: [1,[1],[11]],\r\n            customMap: (params) => {\r\n                // console.log(params.angle - lastRotAngle);\r\n                // lastRotAngle = params.angle;\r\n                // lastRotAngle += Math.PI * 3/2;\r\n    \r\n                // 0: params.y += 1, x += 0\r\n                // 90: params.x -= 1, y += 0\r\n    \r\n                // params.angle = 0;\r\n    \r\n                // const rotation = params.angle * Math.PI / 180;\r\n    \r\n                // {\r\n                //     "x": 896.5984655296048,\r\n                //     "y": 1720.8819734868184,\r\n                //     "w": 25,\r\n                //     "h": 25,\r\n                //     "type": "rotatingsafe",\r\n                //     "angle": -66493.5,\r\n                //     "rotateSpeed": -90,\r\n                //     "pivotX": 925,\r\n                //     "pivotY": 1625,\r\n                //     "distToPivot": 100,\r\n                //     "canCollide": true,\r\n                //     "cullingRadius": 117.67766952966369,\r\n                //     "unSim": 0,\r\n                //     "inView": false\r\n                // },\r\n    \r\n                // in eX, position is set like this\r\n            //     obj.x =\r\n            //     Math.cos((obj.angle * Math.PI) / 180) *\r\n            //         obj.distToPivot +\r\n            //     obj.pivotX;\r\n            // obj.y =\r\n            //     Math.sin((obj.angle * Math.PI) / 180) *\r\n            //         obj.distToPivot +\r\n            //     obj.pivotY;\r\n    \r\n                // and we render like this\r\n    \r\n                // ctx.translate(center.x, center.y);\r\n                // ctx.rotate(degToRad(obstacle.angle));\r\n                // ctx.rect(\r\n                //     -obstacle.w / 2,\r\n                //     -obstacle.h / 2,\r\n                //     obstacle.w,\r\n                //     obstacle.h\r\n                // );\r\n    \r\n                // so obj.x, obj.y = centerX. \r\n    \r\n                // let angle = params.angle;\r\n    \r\n                // lets try setting angle to 0 and see what happens\r\n                // params.angle = 45;\r\n                params.x = params.distToPivot + params.pivotX;\r\n                params.y = params.pivotY;\r\n    \r\n                // they\'re in a straight line like o - ---\r\n    \r\n                // so now, lets rotate the angle around the obs center. We know that the center point of the safe is its center so lets calculate our own distToPivot from that\r\n    \r\n                // const middleX = params.x + params.w / 2;\r\n                // const middleY = params.y + params.h / 2\r\n    \r\n                // const realDistToPivot = Math.sqrt((params.x - params.pivotX) ** 2 + (params.y - params.pivotY) ** 2);\r\n    \r\n                // // // now we have that, we can set the x and y\r\n    \r\n                // // // params.angle = angle;\r\n                // const x = Math.cos(params.angle * Math.PI / 180) * dist + params.pivotX - params.w / 2;\r\n                // const y = Math.sin(params.angle * Math.PI / 180) * dist + params.pivotY - params.h / 2;\r\n    \r\n                return {\r\n                    // x:x*2,y:y*2,initialRotation: 0,\r\n                    x: params.x * 2 - params.w,\r\n                    y: params.y * 2 - params.h,\r\n                    initialRotation: params.angle,\r\n                    rotateSpeed: params.rotateSpeed / 360 / 220 * 1.36,\r\n                    pivotX: params.pivotX * 2,\r\n                    pivotY: params.pivotY * 2\r\n                };\r\n            }\r\n        },\r\n        \'rotatingvinette\': {\r\n            type: [1,[1],[24]],\r\n            customMap: (params) => {\r\n                params.x = params.distToPivot + params.pivotX;\r\n                params.y = params.pivotY;\r\n    \r\n                return {\r\n                    x: params.x * 2 - params.w,\r\n                    y: params.y * 2 - params.h,\r\n                    initialRotation: params.angle,\r\n                    rotateSpeed: params.rotateSpeed / 360 / 220 * 1.36,\r\n                    pivotX: params.pivotX * 2,\r\n                    pivotY: params.pivotY * 2,\r\n                    \r\n                    innerR: params.vc.r,\r\n                    innerG: params.vc.g,\r\n                    innerB: params.vc.b,\r\n                    innerSize: params.ir,\r\n                    outerR: params.vc.r,\r\n                    outerG: params.vc.g,\r\n                    outerB: params.vc.b,\r\n                    outerSize: params.or,\r\n                    innerOpacity: 0,\r\n                    outerOpacity: params.o\r\n                \r\n                };\r\n            }\r\n        },\r\n        \'check\': {\r\n            type: [1,[],[9]],\r\n            customMap: (params) => {\r\n                return {\r\n                    checkpointOffsetX: 0,\r\n                    checkpointOffsetY: 0\r\n                }\r\n            }\r\n        },\r\n        \'tp\': {\r\n            type: [1,[],[12]],\r\n            customMap: (params) => {\r\n                return {\r\n                    tpx: params.tpx * 2,\r\n                    tpy: params.tpy * 2\r\n                }\r\n            }\r\n        },\r\n        \'winpad\': {\r\n            type: [1,[],[6]]\r\n        },\r\n        \'speed\': {\r\n            type: [1,[],[19]],\r\n            customMap: (params) => {\r\n                return {\r\n                    speedChangePermanent: false,\r\n                    speedMult: params.speedInc\r\n                }\r\n            }\r\n        },\r\n        \'size\': {\r\n            type: [1,[],[18]],\r\n            customMap: (params) => {\r\n                return {\r\n                    sizeChangePermanent: false,\r\n                    sizeMult: params.size / 24.5\r\n                }\r\n            }\r\n            //C(1,[],[18],{h:200,w:300,y:700,x:300,sizeChangePermanent:false,sizeMult:1.5,});\r\n        },\r\n        \'snap\': {\r\n            type: [1,[],[16]],\r\n            customMap: (params) => {\r\n                return {\r\n                    snapAngleRotateSpeed: 0,\r\n                    snapAngle: 0,\r\n                    snapCooldown: params.snapWait,\r\n                    snapDistanceY: params.snapDistance,\r\n                    snapDistanceX: params.snapDistance,\r\n                    toSnapX: params.snapX,\r\n                    toSnapY: params.snapY\r\n                }\r\n            }\r\n            // {\r\n            //     "x": 11050,\r\n            //     "y": 1550,\r\n            //     "w": 900,\r\n            //     "h": 500,\r\n            //     "type": "snap",\r\n            //     "snapDistance": 50,\r\n            //     "snapWait": 0.4,\r\n            //     "snapX": true,\r\n            //     "snapY": true,\r\n            //     "inView": false\r\n            // },\r\n        },\r\n        \'coin\': {\r\n            type: [1,[],[7]],\r\n            customMap: (params) => {\r\n                return {\r\n                    color: \'#d5d612\',\r\n                    coinAmount: 1\r\n                }\r\n            }\r\n        },\r\n        \'coindoor\': {\r\n            type: [1,[],[8]],\r\n            customMap: (params) => {\r\n                return {\r\n                    coinDoorColor: \'#d5d612\',\r\n                    coindoorCoinAmount: params.coins\r\n                }\r\n            }\r\n        },\r\n        \'button\': {\r\n            type: [1,[],[7]],\r\n            customMap: (params) => {\r\n                const top = {\r\n                    "x": 14941.438100925527,\r\n                    "y": 5495.870128796381\r\n                };\r\n                const bottom = {\r\n                    "x": 18420.158621406357,\r\n                    "y": 8873.08670452917\r\n                };\r\n                const x = params.x * 2;\r\n                const y = params.y * 2;\r\n                const inside = x > top.x && x < bottom.x && y > top.y && y < bottom.y;\r\n                return {\r\n                    color: inside ? \'#00FF00\' : \'#d6d612\',\r\n                    coinAmount: 1\r\n                }\r\n            }\r\n        },\r\n        \'door\': {\r\n            type: [1,[],[8]],\r\n            customMap: (params) => {\r\n                const id = params.id;\r\n                let coinAmount = 0;\r\n                for(let i = 0; i < obs.length; i++){\r\n                    if(obs[i].type === \'button\' && obs[i].id === id){\r\n                        coinAmount++;\r\n                    }\r\n                }\r\n                const top = {\r\n                    "x": 14941.438100925527,\r\n                    "y": 5495.870128796381\r\n                };\r\n                const bottom = {\r\n                    "x": 18420.158621406357,\r\n                    "y": 8873.08670452917\r\n                };\r\n                const x = params.x * 2;\r\n                const y = params.y * 2;\r\n                const inside = x > top.x && x < bottom.x && y > top.y && y < bottom.y;\r\n                return {\r\n                    coinDoorColor: inside ? \'#00FF00\' : \'#d6d612\',\r\n                    coindoorCoinAmount: inside ? 5 : coinAmount\r\n                }\r\n            }\r\n        },\r\n        \'raxis\': {\r\n            type: [1,[],[15]],\r\n            customMap: (params) => {\r\n                return {\r\n                    axisSpeedMultY: params.ry === true ? 0 : 1,\r\n                    axisSpeedMultX: params.rx === true ? 0 : 1\r\n                }\r\n            }\r\n        },\r\n        \'push\': {\r\n            type: [1,[],[25]],\r\n            customMap: (params) => {\r\n                return {\r\n                    pushAngle: {\'right\': 180, \'down\': 270, \'left\': 0, \'right\': 90}[params.dir],\r\n                    maxPushDistance: params.max * 2,\r\n                    idlePushBackSpeed: params.pushBack / 20,\r\n                    positiveDirectionOnly: true,\r\n                    pushConversionRatio: 0.86\r\n                }\r\n            }\r\n        },//C(3,[],[20],{fontSize:80,text:\'I am a text :D\',y:800,x:450,hex:colourRgb(100,100,100),});\r\n        \'text\': {\r\n            customMap: (params) => {\r\n                // {\r\n                //     "x": 300,\r\n                //     "y": 75,\r\n                //     "angle": 0,\r\n                //     "text": "Welcome to the",\r\n                //     "size": 30,\r\n                //     "story": false,\r\n                //     "element": {\r\n                //         "tWidth": 0,\r\n                //         "tHeight": 0\r\n                //     }\r\n                // },\r\n                if(params.angle !== 0) {\r\n                    return {\r\n                        type: [3,[1],[20]],\r\n                        fontSize: params.size * 2,\r\n                        text: params.text,\r\n                        hex: \'#FFFFFF\',\r\n                        pivotX: params.x * 2,\r\n                        pivotY: params.y * 2,\r\n                        rotateSpeed: 0,\r\n                        initialRotation: params.angle,\r\n                    }\r\n                }//"C(3,[1],[20],{fontSize:80,text:\'I am a text :D\',y:800,x:450,pivotY:800,pivotX:450,rotateSpeed:0,initialRotation:45,hex:colourRgb(100,100,100),});"\r\n                else {\r\n                    return {\r\n                        type: [3,[],[20]],\r\n                        fontSize: params.size * 2,\r\n                        text: params.text,\r\n                        hex: \'#FFFFFF\'\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \'platformer\': {\r\n            type: [1,[],[14]],\r\n            customMap: (params) => {\r\n                const p = {};\r\n                if(params.direction === \'right\'){\r\n                    p.platformerAngle = 0\r\n                } else if(params.direction === \'down\'){\r\n                    p.platformerAngle = 90;\r\n                } else if(params.direction === \'left\'){\r\n                    p.platformerAngle = 180;\r\n                } else {\r\n                    p.platformerAngle = 270;\r\n                }\r\n                p.platformerFriction = 0.9;\r\n                p.platformerAngleRotateSpeed = 0;\r\n                p.platformerForce = params.force / 10000 * 1.5 * 1.8 * 1.6 * 10 / 16.66;\r\n                p.jumpForce = params.jumpHeight / 10 / 8.2 * 2.32 / 1.2 / 2;\r\n                p.jumpDecay = 0.9525;\r\n                p.maxJumpCooldown = 20 * 16.6;\r\n                return p;\r\n            }\r\n            // {\r\n            //     "x": 6600,\r\n            //     "y": 300,\r\n            //     "w": 500,\r\n            //     "h": 350,\r\n            //     "type": "platformer",\r\n            //     "force": 1500,\r\n            //     "dir": {\r\n            //         "x": 0,\r\n            //         "y": 1500\r\n            //     },\r\n            //     "direction": "down",\r\n            //     "jumpHeight": 145,\r\n            //     "maxForce": 1000,\r\n            //     "variableJumpHeight": false,\r\n            //     "platformerFriction": 0.8,\r\n            //     "inView": false\r\n            // },\r\n        },\r\n        \'breakable\': {\r\n            type: [1,[],[10]],\r\n            customMap: (params) => {\r\n                return {\r\n                    maxStrength: Math.max(200,params.maxStrength * Math.max(1,params.timer * 1000 / 60)),\r\n                    regenTime: params.regenTime * 1000 / 15,\r\n                    healSpeed: 1\r\n                }\r\n            }\r\n        },\r\n        // C(1,[],[10],{h:200,w:300,y:700,x:300,healSpeed:1,regenTime:100,maxStrength:60,});\r\n        // {\r\n        //     "x": 2950,\r\n        //     "y": 2650,\r\n        //     "w": 200,\r\n        //     "h": 50,\r\n        //     "type": "breakable",\r\n        //     "maxStrength": 40,\r\n        //     "currentStrength": 40,\r\n        //     "time": 0,\r\n        //     "timer": 0,\r\n        //     "regenTime": 3,\r\n        //     "inView": false\r\n        // },\r\n        \r\n    \r\n        // {\r\n        //     "x": 8550,\r\n        //     "y": 9500,\r\n        //     "radius": 300,\r\n        //     "type": "circle-hollow-slice",\r\n        //     "startAngle": 1.5707963267948966,\r\n        //     "endAngle": -1.5707963267948966,\r\n        //     "startPolygon": {\r\n        //         "points": [\r\n        //             [\r\n        //                 8550,\r\n        //                 9650\r\n        //             ],\r\n        //             [\r\n        //                 8550,\r\n        //                 9800\r\n        //             ]\r\n        //         ],\r\n        //         "type": "poly",\r\n        //         "props": {}\r\n        //     },\r\n        //     "endPolygon": {\r\n        //         "points": [\r\n        //             [\r\n        //                 8550,\r\n        //                 9350\r\n        //             ],\r\n        //             [\r\n        //                 8550,\r\n        //                 9200\r\n        //             ]\r\n        //         ],\r\n        //         "type": "poly",\r\n        //         "props": {}\r\n        //     },\r\n        //     "innerRadius": 150,\r\n        //     "toRotate": false,\r\n        //     "rotateSpeed": 0,\r\n        //     "renderType": "circle",\r\n        //     "inView": false\r\n        // },\r\n        \'circle-hollow-slice\': {\r\n            type: [4,[],[0]],\r\n            customMap: (params) => {\r\n                return {\r\n                    r: params.radius * 2,\r\n                    innerRadius: params.innerRadius * 2,\r\n                    startSliceAngle: params.startAngle,\r\n                    endSliceAngle: params.endAngle,\r\n                    startSliceAngleRotateSpeed: params.rotateSpeed / 2000,\r\n                    endSliceAngleRotateSpeed: params.rotateSpeed / 2000\r\n                }\r\n            }\r\n        },\r\n    \r\n        \'circle-slice\': {\r\n            type: [4,[],[0]],\r\n            customMap: (params) => {\r\n                return {\r\n                    r: params.radius * 2,\r\n                    innerRadius: 0,\r\n                    startSliceAngle: params.startAngle,\r\n                    endSliceAngle: params.endAngle,\r\n                    startSliceAngleRotateSpeed: 0,\r\n                    endSliceAngleRotateSpeed: 0\r\n                }\r\n            }\r\n        },\r\n    \r\n        \'ship\': {\r\n            type: [1,[],[27]],\r\n            customMap: (params) => {\r\n                return {\r\n                    changeShipStateTo: params.state,\r\n                    initialShipAngle: -Math.PI / 2,\r\n                    shipTurnSpeed: Math.PI / 20 / 16.66 / 2\r\n                }\r\n            }\r\n        },\r\n    \r\n        \'musicchange\': {\r\n            type: [1,[],[26]],\r\n            customMap: (params) => {\r\n                return {\r\n                    x: params.x * 2,\r\n                    y: params.y * 2,\r\n                    w: params.w * 2,\r\n                    h: params.h * 2,\r\n                    musicPath: params.musicPath\r\n                };\r\n            }\r\n        },\r\n    \r\n        \'grpu\': {\r\n            type: [1,[],[28]],\r\n            customMap: (params) => {\r\n                return {\r\n                    changeGrappleStateTo: params.state,       \r\n                    grappleRange: 488,\r\n                    grappleForce: 0.06,\r\n                    grappleFric: 0.8,\r\n                };\r\n            }\r\n        },\r\n    }\r\n    \r\n    const enemyTypeMap = {\r\n        normal: (params) => {\r\n            const bounds = {\r\n                x: params.bound.x * 2,\r\n                y: params.bound.y * 2,\r\n                w: params.bound.w * 2,\r\n                h: params.bound.h * 2\r\n            };\r\n            counter++;\r\n            return `\r\n            var xv${counter} = ${params.xv/30};\r\n            var yv${counter} = ${params.yv/30};\r\n            C(0,[3],[1],{r:${params.radius*2},y:${params.y*2},x:${params.x*2},sf:(e)=>{\r\n            e.pos.y += yv${counter};\r\n            e.pos.x += xv${counter};\r\n            if ((e.pos.x - e.sat.r) < ${bounds.x} || e.pos.x + e.sat.r > ${bounds.x + bounds.w}) {\r\n                xv${counter} = xv${counter} * -1;\r\n            }\r\n            if ((e.pos.y - e.sat.r) < ${bounds.y} || e.pos.y + e.sat.r > ${bounds.y + bounds.h}) {\r\n                yv${counter} = yv${counter} * -1;\r\n            }\r\n            },});\r\n            `\r\n            // {\r\n            //     "type": "normal",\r\n            //     "angle": 5.874603837535309,\r\n            //     "radius": 16,\r\n            //     "speed": 85,\r\n            //     "x": 6898.622849512051,\r\n            //     "y": 4711.556031428228,\r\n            //     "renderX": 6898.622849512051,\r\n            //     "renderY": 4711.556031428228,\r\n            //     "xv": 78.00325384310767,\r\n            //     "yv": 33.77117691001763,\r\n            //     "bound": {\r\n            //         "x": 6400,\r\n            //         "y": 4250,\r\n            //         "w": 600,\r\n            //         "h": 700\r\n            //     },\r\n            //     "isLava": false,\r\n            //     "inView": false\r\n            // },\r\n        },\r\n        square: (params) => {\r\n            const bounds = {\r\n                x: params.bound.x * 2,\r\n                y: params.bound.y * 2,\r\n                w: params.bound.w * 2,\r\n                h: params.bound.h * 2\r\n            };\r\n            const size = params.size;\r\n            counter++;\r\n            return `\r\n            var xv${counter} = ${params.xv/42};\r\n            var yv${counter} = ${params.yv/42};\r\n            C(1,[3],[1],{w:${size},h:${size},y:${params.y*2},x:${params.x*2},sf:(e)=>{\r\n            e.pos.y += yv${counter};\r\n            e.pos.x += xv${counter};\r\n            if ((e.pos.x) < ${bounds.x} || e.pos.x + ${size} > ${bounds.x + bounds.w}) {\r\n                xv${counter} = xv${counter} * -1;\r\n            }\r\n            if ((e.pos.y) < ${bounds.y} || e.pos.y + ${size} > ${bounds.y + bounds.h}) {\r\n                yv${counter} = yv${counter} * -1;\r\n            }\r\n            },});\r\n            `\r\n            // {\r\n            //     "type": "normal",\r\n            //     "angle": 5.874603837535309,\r\n            //     "radius": 16,\r\n            //     "speed": 85,\r\n            //     "x": 6898.622849512051,\r\n            //     "y": 4711.556031428228,\r\n            //     "renderX": 6898.622849512051,\r\n            //     "renderY": 4711.556031428228,\r\n            //     "xv": 78.00325384310767,\r\n            //     "yv": 33.77117691001763,\r\n            //     "bound": {\r\n            //         "x": 6400,\r\n            //         "y": 4250,\r\n            //         "w": 600,\r\n            //         "h": 700\r\n            //     },\r\n            //     "isLava": false,\r\n            //     "inView": false\r\n            // },\r\n        },\r\n        turret: (params) => {\r\n            // {\r\n            //     "type": "turret",\r\n            //     "angle": 3.6232766945442836,\r\n            //     "shootSpeed": 3.58,\r\n            //     "timer": 2.2316666666694256,\r\n            //     "pRadius": 32,\r\n            //     "pSpeed": 120,\r\n            //     "projectiles": [\r\n            //         {\r\n            //             "x": 4291,\r\n            //             "y": 3450,\r\n            //             "angle": 0\r\n            //         },\r\n            //         {\r\n            //             "x": 3862,\r\n            //             "y": 3450,\r\n            //             "angle": 0\r\n            //         }\r\n            //     ],\r\n            //     "shootDirections": [\r\n            //         0\r\n            //     ],\r\n            //     "csd": 0,\r\n            //     "deadProjectiles": [],\r\n            //     "radius": 32,\r\n            //     "speed": 0,\r\n            //     "x": 3700,\r\n            //     "y": 3450,\r\n            //     "renderX": 3700,\r\n            //     "renderY": 3450,\r\n            //     "xv": 0,\r\n            //     "yv": 0,\r\n            //     "bound": {\r\n            //         "x": 3650,\r\n            //         "y": 3400,\r\n            //         "w": 850,\r\n            //         "h": 100\r\n            //     },\r\n            //     "inView": true\r\n            // },\r\n            const bounds = {\r\n                x: params.bound.x * 2,\r\n                y: params.bound.y * 2,\r\n                w: params.bound.w * 2,\r\n                h: params.bound.h * 2\r\n            };\r\n            counter++;\r\n            const shootSpeed = params.shootSpeed * 1000 / 15;\r\n            const projectileParams = {\r\n                speed: params.pSpeed / 42,\r\n                radius: params.pRadius * 2,\r\n                shootDirections: params.shootDirections,\r\n            }\r\n            const c = counter;\r\n            return `\r\n            var xv${c} = ${params.xv/42};\r\n            var yv${c} = ${params.yv/42};\r\n            var shootDirectionIndex${c} = 0;\r\n            var timer${c} = ${shootSpeed};\r\n            C(0,[3],[1],{r:${params.radius},y:${params.y*2},x:${params.x*2},sf:(e)=>{\r\n            e.pos.y += yv${c};\r\n            e.pos.x += xv${c};\r\n            if ((e.pos.x - e.sat.r) < ${bounds.x} || e.pos.x + e.sat.r > ${bounds.x + bounds.w}) {\r\n                xv${c} = xv${c} * -1;\r\n            }\r\n            if ((e.pos.y - e.sat.r) < ${bounds.y} || e.pos.y + e.sat.r > ${bounds.y + bounds.h}) {\r\n                yv${c} = yv${c} * -1;\r\n            }\r\n    \r\n            timer${c}--;\r\n            if(timer${c} < 0){\r\n                timer${c} = ${shootSpeed};\r\n    \r\n                shootDirectionIndex${c}++;\r\n                const shootDirections = [${projectileParams.shootDirections.toString()}];\r\n                if(shootDirectionIndex${c} >= shootDirections.length){\r\n                    shootDirectionIndex${c} = 0;\r\n                }\r\n                let dir = shootDirections[shootDirectionIndex${c}];\r\n    \r\n                counter++;\r\n                /*scoped using let*/\r\n                let xv${counter} = Math.cos(dir) * ${projectileParams.speed};\r\n                let yv${counter} = Math.sin(dir) * ${projectileParams.speed};\r\n                C(0,[3],[1],{r:${projectileParams.radius},y:e.pos.y,x:e.pos.x,sf:(e)=>{\r\n                e.pos.y += yv${counter};\r\n                e.pos.x += xv${counter};\r\n                /*delete obstacle*/\r\n                if ((e.pos.x - e.sat.r) < ${bounds.x} || e.pos.x + e.sat.r > ${bounds.x + bounds.w} || (e.pos.y - e.sat.r) < ${bounds.y} || e.pos.y + e.sat.r > ${bounds.y + bounds.h}) {\r\n                    window.tickFns.push(()=>{\r\n                        for(let i = 0; i < obstacles.length; i++){\r\n                            if(obstacles[i] === e) {obstacles.splice(i,1); break;}\r\n                        }\r\n                        /*for(let key in window.idToObs){\r\n                            if(window.idToObs[key] === e){delete window.idToObs[key]; break;}\r\n                        }*/\r\n                    });\r\n                }\r\n                },});\r\n            }\r\n    \r\n            },});\r\n            `\r\n        },\r\n        switch: (params) => {\r\n            // {\r\n            //     "type": "switch",\r\n            //     "angle": 0.6586898029125109,\r\n            //     "switchTime": 3.2,\r\n            //     "switchTimer": 2.3083333333306277,\r\n            //     "currentSwitch": true,\r\n            //     "radius": 25,\r\n            //     "speed": 22,\r\n            //     "x": 2557.5655869230604,\r\n            //     "y": 4628.602260600484,\r\n            //     "renderX": 2557.5655869230604,\r\n            //     "renderY": 4628.602260600484,\r\n            //     "xv": -17.397486856740482,\r\n            //     "yv": 13.465788171122483,\r\n            //     "bound": {\r\n            //         "x": 2400,\r\n            //         "y": 4150,\r\n            //         "w": 350,\r\n            //         "h": 650\r\n            //     },\r\n            //     "inView": false\r\n            // },\r\n            const bounds = {\r\n                x: params.bound.x * 2,\r\n                y: params.bound.y * 2,\r\n                w: params.bound.w * 2,\r\n                h: params.bound.h * 2\r\n            };\r\n            counter++;\r\n            const maxSwitchTime = params.switchTime*1000/16; \r\n            return `\r\n            var xv${counter} = ${params.xv/42*4};\r\n            var yv${counter} = ${params.yv/42*4};\r\n            var switchTime${counter} = ${maxSwitchTime*Math.random()*2};\r\n            var switchState${counter} = true;\r\n            var pos${counter} = {\r\n                x: ${params.x*2}, y: ${params.y*2} \r\n            }\r\n            C(0,[3],[1],{r:${params.radius},y:${params.y*2},x:${params.x*2},sf:(e)=>{\r\n                pos${counter}.y += yv${counter};\r\n                pos${counter}.x += xv${counter};\r\n                if ((pos${counter}.x - e.sat.r) < ${bounds.x} || pos${counter}.x + e.sat.r > ${bounds.x + bounds.w}) {\r\n                    xv${counter} = xv${counter} * -1;\r\n                }\r\n                if ((pos${counter}.y - e.sat.r) < ${bounds.y} || pos${counter}.y + e.sat.r > ${bounds.y + bounds.h}) {\r\n                    yv${counter} = yv${counter} * -1;\r\n                }\r\n    \r\n                if(switchState${counter} === true){\r\n                    e.pos.x = pos${counter}.x;\r\n                    e.pos.y = pos${counter}.y;\r\n                } else {\r\n                    e.pos.x = -100000;\r\n                }\r\n    \r\n                switchTime${counter}--;\r\n                if(switchTime${counter} <= 0){\r\n                    switchTime${counter} = ${params.switchTimer*1000/15};\r\n                    switchState${counter} = !switchState${counter};\r\n                    if(switchState${counter} === true){\r\n                        /*if we\'re switching on, reset to pos we were on. This wasn\'t how the enemy worked before but it\'s ok*/\r\n                        e.pos.x = pos${counter}.x;\r\n                        e.pos.y = pos${counter}.y;\r\n                    }\r\n                }\r\n            }});\r\n            C(0,[3],[0],{r:${params.radius},y:${params.y*2},x:${params.x*2},sf:(e)=>{\r\n                if(switchState${counter} === true){\r\n                    e.pos.x = -100000;\r\n                } else {\r\n                    e.pos.x = pos${counter}.x;\r\n                    e.pos.y = pos${counter}.y;\r\n                }\r\n            }});\r\n            `\r\n            // {\r\n            //     "type": "normal",\r\n            //     "angle": 5.874603837535309,\r\n            //     "radius": 16,\r\n            //     "speed": 85,\r\n            //     "x": 6898.622849512051,\r\n            //     "y": 4711.556031428228,\r\n            //     "renderX": 6898.622849512051,\r\n            //     "renderY": 4711.556031428228,\r\n            //     "xv": 78.00325384310767,\r\n            //     "yv": 33.77117691001763,\r\n            //     "bound": {\r\n            //         "x": 6400,\r\n            //         "y": 4250,\r\n            //         "w": 600,\r\n            //         "h": 700\r\n            //     },\r\n            //     "isLava": false,\r\n            //     "inView": false\r\n            // },\r\n        },\r\n        flashlight: (params) => {\r\n            if(Math.random() < 0.5) return \'\';\r\n            return enemyTypeMap.turret({\r\n                "type": "turret",\r\n                "angle": params.angle,\r\n                "shootSpeed": 1.54,\r\n                "timer": 0,\r\n                "pRadius": params.radius * (Math.random()*0.8 + 0.2),\r\n                "pSpeed": params.speed * (1.65+Math.random()),\r\n                "projectiles": [],\r\n                "shootDirections": [\r\n                    0, Math.PI / 2, Math.PI, Math.PI * 3/2\r\n                ],\r\n                "csd": 0,\r\n                "deadProjectiles": [],\r\n                "radius": params.radius,\r\n                "speed": params.speed,\r\n                "x": params.x,\r\n                "y": params.y,\r\n                "renderX": params.renderX,\r\n                "renderY": params.renderY,\r\n                "xv": params.xv,\r\n                "yv": params.yv,\r\n                "bound": params.bound,\r\n                "inView": false\r\n            },)\r\n        }\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------------------\r\n\r\n    const alreadyLogged = {};\r\n\r\n    var str = \'\';\r\n\r\n    let alreadyLoggedEnemy = {};\r\n    for(let i = 0; i < enemies.length; i++){\r\n        if(enemyTypeMap[enemies[i].type] !== undefined){\r\n            str += \'\\n\' + enemyTypeMap[enemies[i].type](enemies[i]);\r\n        } else if(alreadyLoggedEnemy[enemies[i].type] === undefined){\r\n            alreadyLoggedEnemy[enemies[i].type] = true;\r\n            console.log(`no enemy type def for ${enemies[i].type}`);\r\n        }\r\n    }\r\n\r\n    for(let i = 0; i < obs.length; i++){\r\n        const o = obs[i];\r\n        const typeDef = typeMap[o.type];\r\n\r\n        if(o.type === \'roundedcorners\' || o.type === \'roundedlava\'){\r\n            const circleType = o.type === \'roundedcorners\' ? \'circle-normal\' : \'circle-lava\';\r\n            for(let i = 0; i < o.circles.length; i++){\r\n                obs.push({\r\n                    x: o.circles[i].x,\r\n                    y: o.circles[i].y,\r\n                    radius: o.circles[i].radius,\r\n                    "renderType": "circle",\r\n                    "inView": false,\r\n                    type: circleType\r\n                })\r\n            }\r\n            const rectType = o.type === \'roundedcorners\' ? \'normal\' : \'lava\';\r\n            for(let i = 0; i < o.rects.length; i++){\r\n                obs.push({\r\n                    x: o.rects[i].x,\r\n                    y: o.rects[i].y,\r\n                    w: o.rects[i].w,\r\n                    h: o.rects[i].h,\r\n                    type: rectType\r\n                })\r\n            }\r\n            continue;\r\n        } else if(o.type === \'color\'){\r\n            o.x *= 2; o.y *= 2; o.w *= 2; o.h *= 2;\r\n            const minX = o.x - 100;\r\n            const minY = o.y - 100;\r\n            const maxX = o.x + o.w + 100;\r\n            const maxY = o.y + o.h + 100;\r\n            str += `var minX${counter}, minY${counter}, maxX${counter}, maxY${counter};\r\n            minX${counter} = ${minX};minY${counter} = ${minY};maxX${counter} = ${maxX};maxY${counter} = ${maxY};\r\n            C(1,[3],[0],{h:1,w:1,y:0,x:-10000,sf:(e)=>{\r\n                const player = window.players[window.selfId];\r\n                if ((player.pos.x) > md(minX${counter}) && (player.pos.x) < md(maxX${counter}) && (player.pos.y) > md(minY${counter}) && (player.pos.y) < md(maxY${counter})) {\r\n                    colors.background="${o.tileColor}"; colors.tile="${o.bgColor}";\r\n                }\r\n            },});\\n`;\r\n            counter++;\r\n        } else if(o.type === \'switchlava\'){\r\n            o.x *= 2; o.y *= 2; o.w *= 2; o.h *= 2;\r\n            str += `var timer${counter} = ${o.timer}; var state${counter} =${o.state}; var x${counter} = ${o.x}; \r\n            C(1,[],[1],{h:${o.h},w:${o.w},y:${o.y},x:${o.x},sf:(e)=>{\r\n                    timer${counter} -= dt / 1000;\r\n                    if(timer${counter} < 0){\r\n                        state${counter} = !state${counter};\r\n                        if(state${counter} === true){\r\n                            // on\r\n                            timer${counter} += ${o.onTime};\r\n                            e.pos.x = x${counter};\r\n                        } else {\r\n                            // off\r\n                            timer${counter} += ${o.offTime};\r\n                            e.pos.x = -1E9;\r\n                        }\r\n                    }\r\n                },\r\n                cr:(e)=>{\r\n                    ctx.beginPath();\r\n                    \r\n                    if (state${counter}) {\r\n                        if (timer${counter} < 0.2 && ${o.onTime} > 0.2) {\r\n                            ctx.globalAlpha = timer${counter} / 0.2;\r\n                        }\r\n                    } else {\r\n                        ctx.globalAlpha = 0.3;\r\n                        if (timer${counter} < 0.2 && ${o.offTime} > 0.2) {\r\n                            ctx.globalAlpha = 0.9 * (1 - timer${counter} / 0.2) + 0.1;\r\n                        }\r\n                    }\r\n                    ctx.fillStyle = ${o.collidable} ? \'#c70000\' : \'#9e0000\';\r\n                    /*if (obstacle.collidable) {\r\n                        ctx.fillStyle = \'#c70000\';\r\n                    }*/ \r\n\r\n                    ctx.lineWidth = 4;\r\n                    ctx.strokeStyle = \'black\';\r\n                    ctx.rect(x${counter}, e.pos.y, e.dimensions.x, e.dimensions.y);\r\n                    ctx.fill();\r\n                    ctx.stroke();\r\n                    ctx.closePath();\r\n                    ctx.globalAlpha = 1;\r\n                }\r\n            });\\n`;\r\n            counter++;\r\n        } else if(o.type === \'block\' || o.type === \'trans\'){\r\n            o.x *= 2; o.y *= 2; o.w *= 2; o.h *= 2;\r\n            str += `C(1,[],[20],{h:${o.h},w:${o.w},y:${o.y},x:${o.x},\r\n                cr:(e)=>{\r\n                    ctx.beginPath();\r\n                    ctx.lineWidth = 2;\r\n                    ctx.strokeStyle = ctx.fillStyle = ${o.type === \'trans\' ? "colors.background" : "\'" + (o.hex ?? o.color) + "\'"};\r\n                    ctx.globalAlpha = ${o.opaq ?? 1};\r\n                    ctx.rect(e.pos.x, e.pos.y, e.dimensions.x, e.dimensions.y);\r\n                    ctx.fill();\r\n                    ctx.stroke();\r\n                    ctx.closePath();\r\n                    ctx.globalAlpha = 1;\r\n                }\r\n            });\\n`;\r\n            counter++;\r\n            continue;\r\n        } else if(o.type === \'grapplepoint\' || o.type === \'movinggrapplepoint\'){\r\n            o.x *= 2; o.y *= 2;\r\n            if(o.type === \'grapplepoint\'){\r\n                str += `C(0,[],[0],{r:20+12/2,y:${o.y},x:${o.x},\r\n                    cr:(e)=>{\r\n                        e.isGrapplePoint = true;\r\n                        ctx.strokeStyle = \'#c9c9c9\';\r\n                        ctx.lineWidth = 12;\r\n                        ctx.globalAlpha = 0.5;\r\n                        ctx.beginPath();\r\n                        ctx.arc(e.pos.x, e.pos.y, 20, 0, Math.PI * 2);\r\n                        ctx.stroke();\r\n                        ctx.closePath();\r\n                        ctx.globalAlpha = 1;\r\n                    }\r\n                });\\n`;\r\n            } else {\r\n                const params = o;\r\n                const p = {path: \'[\'};\r\n                for(let i = 0; i < params.points.length; i++){\r\n                    p.path += `[${params.points[i][0]*2},[${params.points[i][1]*2}],${params.speed * 2 / 1000}],`;\r\n                }\r\n\r\n                p.currentPoint = params.currentPoint;\r\n                p.x = params.points[0][0] * 2;\r\n                p.y = params.points[0][1] * 2;\r\n\r\n                p.path = p.path.substring(0, p.path.length-1);\r\n                p.path += \']\';\r\n                str += `C(0,[0],[0],{r:20+12/2,\r\n                    cr:(e)=>{\r\n                        e.isGrapplePoint = true;\r\n                        ctx.strokeStyle = \'#c9c9c9\';\r\n                        ctx.lineWidth = 12;\r\n                        ctx.globalAlpha = 0.5;\r\n                        ctx.beginPath();\r\n                        ctx.arc(e.pos.x, e.pos.y, 20, 0, Math.PI * 2);\r\n                        ctx.stroke();\r\n                        ctx.closePath();\r\n                        ctx.globalAlpha = 1;\r\n                    },currentPoint:${p.currentPoint},x:${p.x},y:${p.y},path:${p.path}\r\n                });\\n`;\r\n            }\r\n            counter++;\r\n            continue;\r\n        } else if(o.type === \'circle-sentry\'){\r\n            o.x *= 2; o.y *= 2; o.r *= 2;\r\n            o.laser.x *= 2; o.laser.y *= 2; o.laser.w *= 2; o.laser.h *= 2;\r\n            str += `C(1,[5],[1],{h:${o.laser.h},w:${o.laser.w},y:${o.y-o.laser.h/2},x:${o.x-o.laser.w/2},\r\n                boundPlayer: true,\r\n                restAngles: [${o.rest*Math.PI/180}, ${o.rest*Math.PI/180+Math.PI}],\r\n                toRest: true,\r\n                homingRotateSpeed: ${o.speed / 86000},\r\n                detectionRadius: ${Math.sqrt(o.laser.w**2+o.laser.h**2)/2},\r\n                spokeAngles: [0, Math.PI],\r\n                pivotX: ${o.x},\r\n                pivotY: ${o.y}\r\n            });\r\n            C(0,[],[0],{x:${o.x},y:${o.y},r:${o.r},cr:(e)=>{\r\n                ctx.fillStyle = window.colors.tile;\r\n                ctx.beginPath();\r\n                ctx.arc(e.pos.x, e.pos.y, e.sat.r, 0, Math.PI * 2);\r\n                ctx.fill();\r\n                ctx.closePath();\r\n\r\n                ctx.strokeStyle = \'red\';\r\n                ctx.lineWidth = 15;\r\n                ctx.beginPath();\r\n                ctx.arc(\r\n                    e.pos.x,\r\n                    e.pos.y,\r\n                    Math.max(e.sat.r - 30, 0),\r\n                    0,\r\n                    Math.PI * 2\r\n                );\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n            }});`\r\n            counter++;\r\n            continue;\r\n        } else if(o.type === \'resetcoins\'){\r\n            o.x *= 2; o.y *= 2; o.w *= 2; o.h *= 2;\r\n            str += `C(1,[],[20],{x:${o.x},y:${o.y},w:${o.w},h:${o.h},hex:\'#000000\',alpha:0,cr:()=>{},ef:()=>{\r\n                for(let i = 0; i < obstacles.length; i++){\r\n                    if(obstacles[i].collected !== undefined){\r\n                        obstacles[i].collected = false;\r\n                    } else if(obstacles[i].isCoindoor === true){\r\n                        obstacles[i].coins = obstacles[i].maxCoins; \r\n                    }\r\n                }    \r\n            }});`;\r\n            continue;\r\n        } else if(o.type === \'resettimetraps\'){\r\n            o.x *= 2; o.y *= 2; o.w *= 2; o.h *= 2;\r\n            str += `C(1,[],[20],{x:${o.x},y:${o.y},w:${o.w},h:${o.h},hex:\'#000000\',alpha:0,cr:()=>{},ef:()=>{\r\n                for(let i = 0; i < obstacles.length; i++){\r\n                    if(obstacles[i].timeTrapTime !== undefined){\r\n                        obstacles[i].timeTrapTime = obstacles[i].timeTrapMaxTime;\r\n                    }\r\n                }    \r\n            }});`;\r\n            continue;\r\n        }\r\n\r\n        if(typeDef === undefined) {\r\n            if(alreadyLogged[o.type] === undefined){\r\n                alreadyLogged[o.type] = true;\r\n                console.log(\'no type def for \' + o.type);\r\n            }\r\n            \r\n            continue;\r\n        }\r\n\r\n        const params = {type: typeDef.type};\r\n\r\n        for(let key in o){\r\n            if(key === \'type\') continue;\r\n            if(typeDef[key] !== undefined) {\r\n                params[typeDef[key]] = o[key];// o.r instead of o.radius set to o[key] \r\n            } else {\r\n                params[key] = o[key];\r\n            }\r\n        }\r\n\r\n        params.x *= 2;\r\n        params.y *= 2;\r\n        if(params.w) params.w *= 2;\r\n        if(params.h) params.h *= 2;\r\n        if(params.r !== undefined) params.r *= 2;\r\n\r\n        if(typeDef.customMap !== undefined){\r\n            const moreParams = typeDef.customMap(o);\r\n            for(let key in moreParams){\r\n                params[key] = moreParams[key];\r\n            }\r\n        }\r\n        \r\n        let paramString = `{`;\r\n        for(let key in params){\r\n            paramString += `${key}:${JSON.stringify(params[key])},`;\r\n        }\r\n        paramString += \'}\';\r\n\r\n        let typeString = JSON.stringify(params.type);\r\n        typeString = typeString.slice(1, typeString.length-1);\r\n\r\n        //C(1,[],[0],{h:100,w:1100,y:4300,x:4600,});\r\n        str += `C(${typeString},${paramString})\\n`;\r\n    }\r\n\r\n    eval(str);\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (importMap);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///78\n')}}]);