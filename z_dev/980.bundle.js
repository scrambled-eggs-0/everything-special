"use strict";(self.webpackChunkomniserver=self.webpackChunkomniserver||[]).push([[980],{980:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n// ONLY thing the api does is copy over the canvas to a webgl canvas\r\n// with shader effects. This means to draw anything we must draw it\r\n// on the canvas first and then do 1 draw call per each transformation.\r\n// This is the best even though drawing on webgl directly would be faster,\r\n// all our obstacles are tied to the canvas anyways and canvas can do pretty\r\n// much everything besides nonlinear transformations.\r\n\r\n// For the notable exception of doing something with some parameters not encoded\r\n// in the 2d image (e.g. z-coordinate) we should eventually implement a system\r\n// to get a dynamic buffer\r\n\r\nconst placeholder = document.getElementById('webglplaceholder');\r\nlet webGlCanvas, gtx;\r\nlet fragmentShader, vertexShader, glProgram;\r\nlet vertexBuff, triangleBuff;\r\nlet vloc, tloc, uloc/*, sloc*/;\r\nlet tex;\r\n\r\n// // Example vs, fs\r\n// const vs = `\r\n// \tattribute vec2 aVertex;\r\n// \tattribute vec2 aUV;\r\n// \tvarying vec2 vTex;\r\n// \tuniform vec2 pos;\r\n//  precision mediump float;\r\n//  uniform vec2 res;\r\n// \tvoid main(void) {\r\n// \t\tgl_Position = vec4(aVertex + pos, 0.0, 1.0);\r\n// \t\tvTex = aUV;\r\n// \t}`;//aVertex.x + pos.x, (aVertex.y + pos.y)*0.5\r\n\r\n// const fs = `\r\n// \tprecision highp float;\r\n// \tvarying vec2 vTex;\r\n// \tuniform sampler2D sampler0;\r\n// \tvoid main(void){\r\n// \t\tgl_FragColor = vec4(1,1,1,1) - texture2D(sampler0, vTex);\r\n// \t}`;\r\n\r\n// should not be called directly. Instead, call window.initDistortions from render.js\r\n// which will make sure the file is imported\r\nwindow._initDistortions = (vs, fs) => {\r\n    webGlCanvas = document.createElement('canvas');\r\n    gtx = webGlCanvas.getContext('webgl2');\r\n    placeholder.appendChild(webGlCanvas);\r\n    window.distortionsActive = true;\r\n\r\n    // window.resizeFns.push(resizeGtx);\r\n    resizeGtx();\r\n\r\n    _createImageBuffers();\r\n\r\n    setVertexShader(vs, false);\r\n    setFragmentShader(fs, true);\r\n}\r\n\r\nwindow.unInitDistortions = () => {\r\n    window.distortionsActive = false;\r\n    webGlCanvas = gtx = undefined;\r\n    fragmentShader = vertexShader = glProgram = undefined;\r\n    vertexBuff = triangleBuff = undefined;\r\n    vloc = tloc = uloc = /*sloc =*/ undefined;\r\n    tex = undefined;\r\n    placeholder.firstChild.remove();\r\n\r\n    // window.resizeFns = window.resizeFns.filter(f => f !== resizeGtx);\r\n}\r\n\r\n// these are unchanging since we're just drawing a static image\r\n// for now assume a constant resolution, maybe far far future in\r\n// a galaxy far far away we'll let mapmaker customize resolution\r\nlet vertexLen = 0;\r\nfunction _createImageBuffers(){\r\n    // let vertexData = [\r\n    //     -1, 1, -1, -1, 1, -1, 1, 1\r\n    // ];\r\n    // let indicies = [0, 1, 0, 0, 1, 0, 1, 1];\r\n\r\n    let vertexData = [\r\n        -1, -1,// 0\r\n        -1, +1,// 1\r\n        +1, -1,// 2\r\n        +1, +1 // 3\r\n    ];\r\n\r\n    let triangleData = [\r\n        0,1,2,\r\n        1,2,3\r\n    ]\r\n\r\n    // let vertexData = [];// [-1, 1, -1, -1, 1, -1, 1, 1];\r\n    // let indicies = [];// [0, 1, 0, 0, 1, 0, 1, 1]\r\n\r\n    // // 10x10 pixel grid will be represented by 4 verticies (square)\r\n    // const jmp = 10;\r\n    // const resX = Math.floor(canvas.w / jmp);\r\n    // const resY = Math.floor(canvas.h / jmp);\r\n\r\n    // // forming verticies\r\n    // for(let y = 0; y <= resY; y++){\r\n    //     for(let x = 0; x <= resX; x++){\r\n    //         // vertex positions in space. Scaled from -1 to 1\r\n    //         vertexData.push(\r\n    //             (x*jmp)/canvas.w*2-1,\r\n    //             (y*jmp)/canvas.h*2-1\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    // // forming triangles\r\n    // // we form triangles from y layer n to y layer n+1\r\n    // let curIndex = 0;\r\n    // for(let y = 0; y <= resY-1; y++){\r\n    //     for(let x = 0; x <= resX-1; x++){\r\n    //         indicies.push(\r\n    //             curIndex,\r\n    //             curIndex+1,\r\n    //             curIndex+resX,\r\n    //         );\r\n    //         indicies.push(\r\n    //             curIndex+1,\r\n    //             curIndex+resX,\r\n    //             curIndex+resX+1,\r\n    //         );\r\n    //         curIndex++;\r\n    //     }\r\n    // }\r\n\r\n    vertexLen = vertexData.length;\r\n\r\n    vertexData = new Float32Array(vertexData);\r\n    triangleData = new Uint32Array(triangleData);\r\n\r\n    vertexBuff = gtx.createBuffer();\r\n    gtx.bindBuffer(gtx.ARRAY_BUFFER, vertexBuff);\r\n    gtx.bufferData(gtx.ARRAY_BUFFER, vertexData, gtx.STATIC_DRAW);\r\n\r\n    triangleBuff = gtx.createBuffer();\r\n    gtx.bindBuffer(gtx.ARRAY_BUFFER, triangleBuff);\r\n    gtx.bufferData(gtx.ARRAY_BUFFER, triangleData, gtx.STATIC_DRAW);\r\n}\r\n\r\nwindow.setVertexShader = (str, toUpdate=true) => {\r\n    vertexShader = gtx.createShader(gtx.VERTEX_SHADER);\r\n    gtx.shaderSource(vertexShader, str);\r\n    gtx.compileShader(vertexShader);\r\n\r\n    if(toUpdate === true) _updateProgram();\r\n}\r\n\r\nwindow.setFragmentShader = (str, toUpdate=true) => {\r\n    fragmentShader = gtx.createShader(gtx.FRAGMENT_SHADER);\r\n    gtx.shaderSource(fragmentShader, str);\r\n    gtx.compileShader(fragmentShader);\r\n\r\n    if(toUpdate === true) _updateProgram();\r\n}\r\n\r\nfunction _updateProgram(){\r\n    glProgram = gtx.createProgram();\r\n    gtx.attachShader(glProgram, vertexShader);\r\n    gtx.attachShader(glProgram, fragmentShader);\r\n\r\n    gtx.linkProgram(glProgram);\r\n    gtx.useProgram(glProgram);\r\n\r\n    vloc = gtx.getAttribLocation(glProgram, \"aVertex\"); \r\n    tloc = gtx.getAttribLocation(glProgram, \"aUV\");\r\n    uloc = gtx.getUniformLocation(glProgram, \"pos\");\r\n    // sloc = gtx.getUniformLocation(glProgram, \"res\");\r\n}\r\n\r\nfunction _tellGlLocations(){\r\n    gtx.enableVertexAttribArray(vloc);\r\n    gtx.bindBuffer(gtx.ARRAY_BUFFER, vertexBuff);\r\n    gtx.vertexAttribPointer(vloc, 2, gtx.FLOAT, false, 0, 0);\r\n\r\n    gtx.enableVertexAttribArray(tloc);\r\n    gtx.bindBuffer(gtx.ARRAY_BUFFER, triangleBuff);\r\n    gtx.bindTexture(gtx.TEXTURE_2D, tex);\r\n    gtx.vertexAttribPointer(tloc, 2, gtx.UNSIGNED_INT, false, 0, 0);\r\n}\r\n\r\n// copies the canvas contents onto webgl\r\nwindow.drawGtx = (img=canvas) => {\r\n    // setting texture\r\n    tex = gtx.createTexture();\r\n    gtx.bindTexture(gtx.TEXTURE_2D, tex);\r\n    \r\n    gtx.texParameteri(gtx.TEXTURE_2D, gtx.TEXTURE_WRAP_S, gtx.CLAMP_TO_EDGE);\r\n    gtx.texParameteri(gtx.TEXTURE_2D, gtx.TEXTURE_WRAP_T, gtx.CLAMP_TO_EDGE);\r\n    gtx.texParameteri(gtx.TEXTURE_2D, gtx.TEXTURE_MIN_FILTER, gtx.NEAREST);// gtx.LINEAR\r\n\r\n    gtx.texImage2D(gtx.TEXTURE_2D, 0,  gtx.RGBA,  gtx.RGBA, gtx.UNSIGNED_BYTE, img);\r\n\r\n\r\n    // gtx.enableVertexAttribArray(sloc);\r\n    // gtx.uniform2f(sloc, canvas.width, canvas.height);\r\n\r\n    // gtx.drawArrays(gtx.TRIANGLE_FAN, 0, 4);\r\n    // gtx.clearColor(0, 0, 0, 1.0);\r\n    // gtx.clear(gtx.COLOR_BUFFER_BIT);\r\n    \r\n    gtx.drawElements(\r\n        gtx.TRIANGLES,\r\n        vertexLen,\r\n        gtx.UNSIGNED_INT,\r\n        0,\r\n    )\r\n    // gtx.drawArrays(gtx.TRIANGLE_FAN, 0, 4);\r\n}\r\n\r\nwindow.resizeGtx = () => {\r\n    window.resizeElements([webGlCanvas]);\r\n    gtx.viewport(0, 0, webGlCanvas.width, webGlCanvas.height);\r\n}\r\n\r\n\r\n// () => {\r\n// // const vs = `\r\n// // \tattribute vec2 aVertex;\r\n// // \tattribute vec2 aUV;\r\n// // \tvarying vec2 vTex;\r\n// // \tuniform vec2 pos;\r\n// //     // precision mediump float;\r\n// //     // uniform vec2 res;\r\n// // \tvoid main(void) {\r\n// //         // // coords go from -1 to 1\r\n// //         // float angle = 0.;//atan(pos.y, pos.x + 1e-10);\r\n\r\n// //         // float dist = sqrt(pos.x*pos.x+pos.y*pos.y);\r\n// //         // float p = max(abs(cos(angle)), abs(sin(angle)));\r\n        \r\n// //         // // maxDistAlongAngle = 1. / (p * p);\r\n// //         // // mag = 0.2 * dist / maxDistAlongAngle;\r\n// //         // float mag = 0.1;//0.2 * dist * p * p;\r\n\r\n// //         // gl_Position = vec4(aVertex.x + pos.x., aVertex.y + pos.y, 0.0, 1.0);\r\n// // \t\t// gl_Position = vec4(cos(angle) * mag, sin(angle) * mag, 0.0, 1.0);\r\n// //         gl_Position = vec4(aVertex + pos, 0.0, 1.0);\r\n// // \t\tvTex = aUV;\r\n// // \t}`;\r\n\r\n// const vs = `\r\n// \tattribute vec2 aVertex;\r\n// \tattribute vec2 aUV;\r\n// \tvarying vec2 vTex;\r\n// \tuniform vec2 pos;\r\n// \tvoid main(void) {\r\n//         float angle = atan(aVertex.y + pos.y, aVertex.x + pos.x + 1e-10);\r\n\r\n//         gl_Position = vec4((aVertex.x + pos.x)*(cos(angle)+1.), aVertex.y + pos.y, 0.0, 1.0);\r\n// \t\tvTex = aUV;\r\n// \t}`;\r\n\r\n// const fs = `\r\n// \tprecision highp float;\r\n// \tvarying vec2 vTex;\r\n// \tuniform sampler2D sampler0;\r\n// \tvoid main(void){\r\n// \t\tgl_FragColor = texture2D(sampler0, vTex);\r\n// \t}`;// vec4(1,1,1,1) - \r\n// initDistortions(vs, fs);\r\n// }\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///980\n")}}]);